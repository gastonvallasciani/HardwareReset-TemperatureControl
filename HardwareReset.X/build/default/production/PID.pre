
# 1 "PID.c"

# 12 "PID.h"
typedef struct {
volatile int Min;
volatile int Max;

volatile double Kp;
volatile double Ki;
volatile double Kd;

volatile double SetPoint;
} tPID;

int PID_Control(int);
void PID_SetPoint(int);
void PID_SetTunings(double, double, double);
void PID_SetSampleTime(int);
void PID_SetOutputLimits(int, int);
void PID_SetControllerDirection(int);
void PID_SetMode(int);
void PID_Initialize(void);

extern tPID PIDConfig;

# 12 "PID.c"
tPID PIDConfig;



int Input, Output;
double ITerm, lastInput;
int SampleTime = 1000;
int controllerDirection = 0;
unsigned char inAuto = 0;

int PID_Control(int newInput)
{
double error, dInput;

Input = newInput;
if(!inAuto) return PIDConfig.Min;



{

error = PIDConfig.SetPoint - Input;
ITerm += (PIDConfig.Ki * error);
if (ITerm > PIDConfig.Max) ITerm = PIDConfig.Max;
else if (ITerm < PIDConfig.Min) ITerm = PIDConfig.Min;
dInput = (Input - lastInput);


Output = (int)(PIDConfig.Kp * error + ITerm - PIDConfig.Kd * dInput);
if (Output > PIDConfig.Max) Output = PIDConfig.Max;
else if(Output < PIDConfig.Min) Output = PIDConfig.Min;


lastInput = Input;

}
return (PIDConfig.Max - Output);
}

void PID_SetPoint(int newSetPoint)
{
PIDConfig.SetPoint = newSetPoint;
}
void PID_SetTunings(double Kp, double Ki, double Kd)
{
double SampleTimeInSec;

if ((Kp < 0) || (Ki < 0) || (Kd < 0)) return;

SampleTimeInSec = ((double)SampleTime)/1000;
PIDConfig.Kp = Kp;
PIDConfig.Ki = Ki * SampleTimeInSec;
PIDConfig.Kd = Kd / SampleTimeInSec;

if(controllerDirection == 1)
{
PIDConfig.Kp = (0 - PIDConfig.Kp);
PIDConfig.Ki = (0 - PIDConfig.Ki);
PIDConfig.Kd = (0 - PIDConfig.Kd);
}
}
void PID_SetSampleTime(int newSampleTime)
{
if (newSampleTime > 0)
{
double ratio = (double)newSampleTime / (double)SampleTime;
PIDConfig.Ki *= ratio;
PIDConfig.Kd /= ratio;
SampleTime = (unsigned long)newSampleTime;
}
}
void PID_SetOutputLimits(int Min, int Max)
{
if(Min > Max) return;
PIDConfig.Min = Min;
PIDConfig.Max = Max;

if (Output > PIDConfig.Max) Output = PIDConfig.Max;
else if (Output < PIDConfig.Min) Output = PIDConfig.Min;

if (ITerm > PIDConfig.Max) ITerm= PIDConfig.Max;
else if (ITerm < PIDConfig.Min) ITerm= PIDConfig.Min;
}
void PID_SetControllerDirection(int Direction)
{
controllerDirection = Direction;
}
void PID_SetMode(int Mode)
{
unsigned char newAuto = (Mode == 1);
if (newAuto == !inAuto)
{

PID_Initialize();
}
inAuto = newAuto;
}
void PID_Initialize()
{
lastInput = Input;
ITerm = Output;
if (ITerm > PIDConfig.Max) ITerm = PIDConfig.Max;
else if (ITerm < PIDConfig.Min) ITerm = PIDConfig.Min;
}
